# Вопросы и ответы по исключениям в Java

## Оглавление
1. [Что такое исключение? Для чего они нужны?](#1-что-такое-исключение-для-чего-они-нужны)
2. [Общее про исключения](#2-общее-про-исключения)
3. [Иерархия исключений](#3-иерархия-исключений)
4. [Может ли main() выбросить исключение?](#4-может-ли-main-выбросить-исключение)
5. [Проверяемые и непроверяемые исключения](#5-проверяемые-и-непроверяемые-исключения)
6. [Можно ли обработать непроверяемое исключение?](#6-можно-ли-обработать-непроверяемое-исключение)
7. [Нужно ли ловить Error-исключения?](#7-нужно-ли-ловить-error-исключения)
8. [Как бросить исключение? Можно ли бросить не новое исключение?](#8-как-бросить-исключение-можно-ли-бросить-не-новое-исключение)
9. [Информация внутри исключения](#9-информация-внутри-исключения)
10. [Подавленные исключения](#10-подавленные-исключения)
11. [StackTraceElement](#11-stacktraceelement)
12. [try-catch-finally](#12-try-catch-finally)
13. [try-with-resources](#13-try-with-resources)
14. [Правильный порядок catch-блоков](#14-правильный-порядок-catch-блоков)
15. [Несколько исключений в одном catch](#15-несколько-исключений-в-одном-catch)
16. [return в try и finally](#16-return-в-try-и-finally)
17. [Область видимости переменных](#17-область-видимости-переменных)
18. [Double.parseDouble(null) vs Integer.parseInt(null)](#18-doubleparsedoublenull-vs-integerparseintnull)
19. [Основные RuntimeException](#19-основные-runtimeexception)
20. [Поймать несколько исключений в одном блоке catch](#20-поймать-несколько-исключений-в-одном-блоке-catch)
21. [Исключения в конструкторе](#21-исключения-в-конструкторе)
22. [Исключения в finally](#22-исключения-в-finally)
23. [return в finally](#23-return-в-finally)
24. [Исключения в try и finally одновременно](#24-исключения-в-try-и-finally-одновременно)
25. [Отличие исключений от обычных классов](#25-отличие-исключений-от-обычных-классов)
26. [Ключевые слова (try, catch, finally, throw, throws)](#26-ключевые-слова-try-catch-finally-throw-throws)
27. [try-with-resources: исключения в try и close](#27-try-with-resources-исключения-в-try-и-close)
28. [Закрытие ресурсов и иерархия catch](#28-закрытие-ресурсов-и-иерархия-catch)
29. [Методы StackTraceElement](#29-методы-stacktraceelement)
30. [Методы исключений](#30-методы-исключений)

---

## 1. Что такое исключение? Для чего они нужны?
Исключение — это объект, описывающий ошибочную ситуацию во время выполнения программы. Они нужны для того, чтобы отделить обычный поток выполнения программы от обработки ошибок.  

## 2. Общее про исключения
Исключения помогают писать более надёжный код, так как позволяют централизованно обрабатывать ошибки и отделять бизнес-логику от логики ошибок.  

## 3. Иерархия исключений
В Java все исключения наследуются от `Throwable`.  
- `Error` — критические ошибки JVM (OutOfMemoryError, StackOverflowError).  
- `Exception` — обычные исключения.  
  - Проверяемые (checked) — требуют явного `throws` или `try-catch`.  
  - Непроверяемые (unchecked, наследники `RuntimeException`) — можно не обрабатывать.  

## 4. Может ли main() выбросить исключение?
Да, может. Если в `main()` не обработать исключение, оно попадёт в JVM, которая выведет stack trace в консоль.  

## 5. Проверяемые и непроверяемые исключения
- **Синтаксис**: Checked требуют `throws` или `try-catch`. Unchecked можно не указывать.  
- **Идеология**: Checked — ожидаемые ситуации (например, `IOException`). Unchecked — ошибки программиста (например, `NullPointerException`).  

## 6. Можно ли обработать непроверяемое исключение?
Да, можно поймать `RuntimeException` или его наследников.  

## 7. Нужно ли ловить Error-исключения?
Нет, обычно это бессмысленно, так как `Error` означает критическую ошибку JVM.  

## 8. Как бросить исключение? Можно ли бросить не новое исключение?
Используется `throw new MyException()`. Можно пробросить уже созданное исключение (`throw e;`).  

## 9. Информация внутри исключения
Есть сообщение (`getMessage()`), стек вызовов (`printStackTrace()` или `getStackTrace()`), причина (`getCause()`).  

## 10. Подавленные исключения
Подавленные исключения появляются в `try-with-resources`, когда исключение в `try` "перекрывается" исключением при `close()`. Достаём через `Throwable.getSuppressed()`.  

## 11. StackTraceElement
Методы: `getClassName()`, `getMethodName()`, `getFileName()`, `getLineNumber()`.  

## 12. try-catch-finally
- `try` — блок кода, где может быть исключение.  
- `catch` — обработка.  
- `finally` — выполняется всегда (закрытие ресурсов).  

## 13. try-with-resources
Это форма `try`, которая автоматически закрывает ресурсы (`AutoCloseable`). Закрытие идёт в обратном порядке.  

## 14. Правильный порядок catch-блоков
От более конкретного к более общему, иначе компилятор ругнётся.  

## 15. Несколько исключений в одном catch
Да, начиная с Java 7: `catch (IOException | SQLException e)`.  

## 16. return в try и finally
Значение из `finally` перезапишет return из `try`.  

## 17. Область видимости переменных
Переменные, объявленные в `try`, видны только внутри этого блока.  

## 18. Double.parseDouble(null) vs Integer.parseInt(null)
- `Double.parseDouble(null)` → `NullPointerException`.  
- `Integer.parseInt(null)` → `NumberFormatException`.  

## 19. Основные RuntimeException
`NullPointerException`, `ArrayIndexOutOfBoundsException`, `ArithmeticException`, `ClassCastException`, `IllegalArgumentException`, `NumberFormatException` и др.  

## 20. Поймать несколько исключений в одном блоке catch
Да, через `|` (см. пункт 15).  

## 21. Исключения в конструкторе
Конструктор может выбрасывать исключения и объявлять `throws`.  

## 22. Исключения в finally
Можно бросить, но тогда оно "перебьёт" исключение из `try` или `catch`.  

## 23. return в finally
Да, можно, но не рекомендуется: return из `finally` перезапишет return из `try`.  

## 24. Исключения в try и finally одновременно
Вылетит исключение из `finally`. Исключение из `try` будет подавлено.  

## 25. Отличие исключений от обычных классов
Исключения — это тоже классы, но они должны наследоваться от `Throwable`.  

## 26. Ключевые слова (try, catch, finally, throw, throws)
- `try` — блок потенциальной ошибки.  
- `catch` — обработка.  
- `finally` — гарантированный блок.  
- `throw` — генерация исключения.  
- `throws` — объявление в сигнатуре метода.  

## 27. try-with-resources: исключения в try и close
Если исключение в `try` и ещё одно при `close()`, то основное исключение из `try` выбрасывается, а второе попадает в `getSuppressed()`.  

## 28. Закрытие ресурсов и иерархия catch
- Catch-блоки — от частного к общему.  
- Ресурсы закрываются в обратном порядке их объявления.  

## 29. Методы StackTraceElement
`getClassName()`, `getMethodName()`, `getFileName()`, `getLineNumber()`, `isNativeMethod()`.  

## 30. Методы исключений
- `getMessage()`  
- `getCause()`  
- `initCause(Throwable)`  
- `printStackTrace()`  
- `getStackTrace()`  
- `getSuppressed()`  
