# Вопросы и ответы по исключениям в Java

## Оглавление
1. [Что такое исключение? Для чего они нужны?](#1-что-такое-исключение-для-чего-они-нужны)
2. [Общее про исключения](#2-общее-про-исключения)
3. [Иерархия исключений](#3-расскажи-про-иерархию-исключений)
4. [Может ли main() выбросить исключение?](#4-может-ли-метод-main-выбросить-исключение-во-вне-и-если-да-то-где-будет-происходить-обработка-данного-исключения)
5. [Проверяемые и непроверяемые исключения](#5-в-чём-разница-между-проверяемыми-исключениями-и-непроверяемыми-в-чём-разница-с-точки-зрения-синтаксиса-и-идеологическая-при-использовании)
6. [Можно ли обработать непроверяемое исключение?](#6-можно-ли-обработать-непроверяемое-исключение)
7. [Нужно ли ловить Error-исключения?](#7-нужно-ли-ловить-error-исключения)
8. [Как бросить исключение? Можно ли бросить не новое исключение?](#8-как-бросить-исключение-можно-ли-бросить-не-новое-исключение)
9. [Информация внутри исключения](#9-расскажи-про-информацию-которая-находится-внутри-исключения-как-с-ней-работать)
10. [Подавленные исключения](#10-что-такое-подавленные-исключения-как-достать-подавленное-исключение)
11. [StackTraceElement](#11-какую-информацию-можно-получить-из-stacktraceelement)
12. [try-catch-finally](#12-расскажи-про-конструкцию-try-catch-finally)
13. [try-with-resources](#13-что-такое-try-with-resources-как-работает-эта-конструкция)
14. [Правильный порядок catch-блоков](#14-расскажи-как-правильно-ловить-исключения-иерархия-catch-блоков)
15. [Несколько исключений в одном catch](#15-можно-ли-в-одном-catch-обработать-несколько-исключений)
16. [return в try и finally](#16-если-два-return-в-try-и-в-finally-что-произойдёт-с-return-в-try)
17. [Область видимости переменных](#17-почему-переменные-определенные-в-try-не-могут-быть-использованы-в-catch-или-finally)
18. [Double.parseDouble(null) vs Integer.parseInt(null)](#18-почему-doubleparsedoublenull-и-integerparseintnull-вызывают-разные-исключения)
19. [Основные RuntimeException](#19-основные-runtime-exceptions-в-java)
20. [Поймать несколько исключений](#20-можно-ли-поймать-несколько-исключений-в-одном-блоке-catch)
21. [Исключения в конструкторе](#21-может-ли-конструктор-вызывать-исключения)
22. [Исключения в finally](#22-вызов-исключений-в-блоке-final)
23. [return в finally](#23-можно-ли-использовать-return-в-блоке-finally)
24. [Исключения в try и finally одновременно](#24-что-если-в-конструкции-try-finally-вылетело-исключение-сначала-в-try-а-потом-в-finally-какое-исключение-вылетит-что-будет-с-другим)
25. [Отличие исключений от обычных классов](#25-чем-отличаются-исключения-от-обычных-классов)
26. [Ключевые слова (try, catch, finally, throw, throws)](#26-все-ключевые-слова-и-всё-что-с-ними-связано--try-catch-fynally-throw-throws)
27. [try-with-resources: исключения в try и close](#27-try-с-ресурсами-что-если-исключение-вылетело-сначала-в-try-а-потом-в-close-в-конструкции-try-with-recources)
28. [Закрытие ресурсов и иерархия catch](#28-иерархия-catch-блоков-в-каком-порядке-будут-закрыты-ресурсы-в-try-с-ресурсами)
29. [Методы StackTraceElement](#29-методы-stacktraceelement)
30. [Методы исключений](#30-методы-исключений)

---

## 1. Что такое исключение? Для чего они нужны?
Исключение — это объект, описывающий ошибочную ситуацию во время выполнения программы. Они нужны для того, чтобы отделить обычный поток выполнения программы от обработки ошибок.  

## 2. Общее про исключения
Исключения помогают писать более надёжный код, так как позволяют централизованно обрабатывать ошибки и отделять бизнес-логику от логики ошибок.  

## 3. Расскажи про иерархию исключений
В Java все исключения наследуются от `Throwable`.  
- `Error` — критические ошибки JVM (OutOfMemoryError, StackOverflowError).  
- `Exception` — обычные исключения.  
  - Проверяемые (checked) — требуют явного `throws` или `try-catch`.  
  - Непроверяемые (unchecked, наследники `RuntimeException`) — можно не обрабатывать.  

## 4. Может ли метод main() выбросить исключение во вне и если да, то где будет происходить обработка данного исключения
Да, может. Если в `main()` не обработать исключение, оно попадёт в JVM, которая выведет stack trace в консоль.  

## 5. В чём разница между проверяемыми исключениями и непроверяемыми. В чём разница с точки зрения синтаксиса и идеологическая при использовании
- **Синтаксис**: Checked требуют `throws` или `try-catch`. Unchecked можно не указывать.  
- **Идеология**: Checked — ожидаемые ситуации (например, `IOException`). Unchecked — ошибки программиста (например, `NullPointerException`).  

## 6. Можно ли обработать непроверяемое исключение
Да, можно поймать `RuntimeException` или его наследников.  

## 7. Нужно ли ловить Error исключения
Нет, обычно это бессмысленно, так как `Error` означает критическую ошибку JVM.  

## 8. Как бросить исключение? Можно ли бросить НЕ новое исключение
Используется `throw new MyException()`. Можно пробросить уже созданное исключение (`throw e;`).  

## 9. Расскажи про информацию, которая находится внутри исключения. Как с ней работать
Есть сообщение (`getMessage()`), стек вызовов (`printStackTrace()` или `getStackTrace()`), причина (`getCause()`).  

## 10. Что такое подавленные исключения. Как достать подавленное исключение
Подавленные исключения появляются в `try-with-resources`, когда исключение в `try` "перекрывается" исключением при `close()`. Достаём через `Throwable.getSuppressed()`.  

## 11. Какую информацию можно получить из StackTraceElement
Методы: `getClassName()`, `getMethodName()`, `getFileName()`, `getLineNumber()`.  

## 12. Расскажи про конструкцию try-catch-finally
- `try` — блок кода, где может быть исключение.  
- `catch` — обработка.  
- `finally` — выполняется всегда (закрытие ресурсов).  

## 13. Что такое try-with-resources. Как работает эта конструкция
Это форма `try`, которая автоматически закрывает ресурсы (`AutoCloseable`). Закрытие идёт в обратном порядке.  

## 14. Расскажи, как правильно ловить исключения. Иерархия catch блоков
От более конкретного к более общему, иначе компилятор ругнётся.  

## 15. Можно ли одном catch обработать несколько исключений
Да, начиная с Java 7: `catch (IOException | SQLException e)`.  

## 16. Если два return в try и в finally, что произойдёт с return в try
Значение из `finally` перезапишет return из `try`.  

## 17. Почему переменные, определенные в try не могут быть использованы в catch или finally
Потому что они имеют область видимости только внутри блока `{}`.  

## 18. Почему Double.parseDouble(null) и Integer.parseInt(null) вызывают разные исключения
- `Double.parseDouble(null)` → `NullPointerException`.  
- `Integer.parseInt(null)` → `NumberFormatException`.  

## 19. Основные runtime exceptions в Java
`NullPointerException`, `ArrayIndexOutOfBoundsException`, `ArithmeticException`, `ClassCastException`, `IllegalArgumentException`, `NumberFormatException` и др.  

## 20. Можно ли поймать несколько исключений в одном блоке catch
Да, через `|` (см. пункт 15).  

## 21. Может ли конструктор вызывать исключения
Да, может объявлять `throws`.  

## 22. Вызов исключений в блоке final
Можно бросить, но тогда оно "перебьёт" исключение из `try` или `catch`.  

## 23. Можно ли использовать return в блоке finally
Да, но не рекомендуется, так как перезапишет `return` из `try`.  

## 24. Что если в конструкции try finally вылетело исключение сначала в try а потом в finally? Какое исключение вылетит? Что будет с другим
Вылетит исключение из `finally`. Исключение из `try` будет подавлено.  

## 25. Чем отличаются исключения от обычных классов
Исключения — это тоже классы, но они должны наследоваться от `Throwable`.  

## 26. Все ключевые слова и всё что с ними связано – Try Catch Fynally Throw throws
- `try` — блок потенциальной ошибки.  
- `catch` — обработка.  
- `finally` — гарантированный блок.  
- `throw` — генерация исключения.  
- `throws` — объявление в сигнатуре метода.  

## 27. Try с ресурсами что если исключение вылетело сначала в try, а потом в close в конструкции try-with-recources
Исключение из `close()` будет подавлено, а основное исключение — выброшено.  

## 28. Иерархия catch блоков. В каком порядке будут закрыты ресурсы в try с ресурсами
- Catch-блоки — от частного к общему.  
- Ресурсы закрываются в обратном порядке их объявления.  

## 29. Методы StackTraceElement
`getClassName()`, `getMethodName()`, `getFileName()`, `getLineNumber()`, `isNativeMethod()`.  

## 30. Методы исключений
- `getMessage()`  
- `getCause()`  
- `initCause(Throwable)`  
- `printStackTrace()`  
- `getStackTrace()`  
- `getSuppressed()`  
